{"version":3,"file":"static/js/1702.63eae4d7.chunk.js","mappings":"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","sources":["views/tables/status/statusLiving.js"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\n/* eslint-disable react/jsx-key */\r\n/* eslint-disable prettier/prettier */\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\n/* eslint-disable prettier/prettier */\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n  CTable,\r\n  CTableHeaderCell,\r\n  CTableHead,\r\n  CTableRow,\r\n  CTableBody,\r\n  CTableDataCell,\r\n} from '@coreui/react'\r\n\r\nfunction statusLiving(props) {\r\n  const [info, setInfo] = useState()\r\n  const [livingCore, setLivingCore] = useState([])\r\n  const [livingNetworking, setLivingNetworking] = useState([])\r\n  const [livingERC, setLivingERC] = useState([])\r\n  const [livingInterface, setLivingInterface] = useState([])\r\n  const [livingMeta, setLivingMeta] = useState([])\r\n  const [livingInformational, setLivingInformational] = useState([])\r\n\r\n  useEffect(() => {\r\n    setInfo(JSON.parse(localStorage.getItem('count')))\r\n    setLivingCore(JSON.parse(localStorage.getItem('statusLivingCore')))\r\n    setLivingNetworking(JSON.parse(localStorage.getItem('statusLivingNetworking')))\r\n    setLivingERC(JSON.parse(localStorage.getItem('statusLivingERC')))\r\n    setLivingInterface(JSON.parse(localStorage.getItem('statusLivingInterface')))\r\n    setLivingMeta(JSON.parse(localStorage.getItem('statusLivingMeta')))\r\n    setLivingInformational(JSON.parse(localStorage.getItem('statusLivingInformational')))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (props.data !== undefined) {\r\n      setInfo(props.data)\r\n      setLivingCore(props.data.filter(filterLivingCore))\r\n      localStorage.setItem('count', JSON.stringify(props.data))\r\n      localStorage.setItem('statusLivingCore', JSON.stringify(props.data.filter(filterLivingCore)))\r\n      localStorage.setItem('statusLivingNetworking', JSON.stringify(props.data.filter(filterLivingNetworking)))\r\n      localStorage.setItem('statusLivingERC', JSON.stringify(props.data.filter(filterLivingERC)))\r\n      localStorage.setItem('statusLivingInterface', JSON.stringify(props.data.filter(filterLivingInterface)))\r\n      localStorage.setItem('statusLivingMeta', JSON.stringify(props.data.filter(filterLivingMeta)))\r\n      localStorage.setItem('statusLivingInformational', JSON.stringify(props.data.filter(filterLivingInformational)))\r\n    } else {\r\n      localStorage.setItem('count', JSON.stringify(info))\r\n      localStorage.setItem('statusLivingCore', JSON.stringify(info.filter(filterLivingCore)))\r\n      localStorage.setItem('statusLivingNetworking', JSON.stringify(info.filter(filterLivingNetworking)))\r\n      localStorage.setItem('statusLivingERC', JSON.stringify(info.filter(filterLivingERC)))\r\n      localStorage.setItem('statusLivingInterface', JSON.stringify(info.filter(filterLivingInterface)))\r\n      localStorage.setItem('statusLivingMeta', JSON.stringify(info.filter(filterLivingMeta)))\r\n      localStorage.setItem('statusLivingInformational', JSON.stringify(info.filter(filterLivingInformational)))\r\n    }\r\n  }, [info])\r\n\r\n  console.log(info)\r\n  console.log(livingCore)\r\n  console.log(livingInformational)\r\n\r\n  function filterLivingCore(item, index) {\r\n    if (index >= 246 && item[1] === 'Living' && item[5] === 'Core') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterLivingNetworking(item, index) {\r\n    if (index >= 246 && item[1] === 'Living' && item[5] === 'Networking') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterLivingInterface(item, index) {\r\n    if (index >= 246 && item[1] === 'Living' && item[5] === 'Interface') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterLivingERC(item, index) {\r\n    if (index >= 246 && item[1] === 'Living' && item[5] === 'ERC') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterLivingMeta(item, index) {\r\n    if (index >= 246 && item[1] === 'Living' && item[5] === 'Meta') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterLivingInformational(item, index) {\r\n    if (index >= 246 && item[1] === 'Living' && item[5] === 'Informational') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {livingCore.length === 0 ? null : <><div\r\n              style={{\r\n                  fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Core\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {livingCore !== undefined ? (\r\n                          livingCore.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {livingNetworking.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Networking\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {livingNetworking !== undefined ? (\r\n                          livingNetworking.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n    {livingERC.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              ERC\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {livingERC !== undefined ? (\r\n                          livingERC.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {livingInterface.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Interface\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {livingInterface !== undefined ? (\r\n                          livingInterface.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {livingMeta.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Meta\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {livingMeta !== undefined ? (\r\n                          livingMeta.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {livingInformational.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Informational\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {livingInformational !== undefined ? (\r\n                          livingInformational.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default statusLiving\r\n"],"names":["props","useState","info","setInfo","livingCore","setLivingCore","livingNetworking","setLivingNetworking","livingERC","setLivingERC","livingInterface","setLivingInterface","livingMeta","setLivingMeta","livingInformational","setLivingInformational","filterLivingCore","item","index","filterLivingNetworking","filterLivingInterface","filterLivingERC","filterLivingMeta","filterLivingInformational","useEffect","JSON","parse","localStorage","getItem","undefined","data","filter","setItem","stringify","console","log","length","style","fontSize","fontWeight","marginBottom","color","scope","map","parseInt"],"sourceRoot":""}