{"version":3,"file":"static/js/3888.92e3674e.chunk.js","mappings":"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","sources":["views/tables/status/statusWithdrawn.js"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\n/* eslint-disable react/jsx-key */\r\n/* eslint-disable prettier/prettier */\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\n/* eslint-disable prettier/prettier */\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n  CTable,\r\n  CTableHeaderCell,\r\n  CTableHead,\r\n  CTableRow,\r\n  CTableBody,\r\n  CTableDataCell,\r\n} from '@coreui/react'\r\n\r\nfunction statusWithdrawn(props) {\r\n  const [info, setInfo] = useState()\r\n  const [withdrawnCore, setWithdrawnCore] = useState([])\r\n  const [withdrawnNetworking, setWithdrawnNetworking] = useState([])\r\n  const [withdrawnERC, setWithdrawnERC] = useState([])\r\n  const [withdrawnInterface, setWithdrawnInterface] = useState([])\r\n  const [withdrawnMeta, setWithdrawnMeta] = useState([])\r\n  const [withdrawnInformational, setWithdrawnInformational] = useState([])\r\n\r\n  useEffect(() => {\r\n    setInfo(JSON.parse(localStorage.getItem('count')))\r\n    setWithdrawnCore(JSON.parse(localStorage.getItem('statusWithdrawnCore')))\r\n    setWithdrawnNetworking(JSON.parse(localStorage.getItem('statusWithdrawnNetworking')))\r\n    setWithdrawnERC(JSON.parse(localStorage.getItem('statusWithdrawnERC')))\r\n    setWithdrawnInterface(JSON.parse(localStorage.getItem('statusWithdrawnInterface')))\r\n    setWithdrawnMeta(JSON.parse(localStorage.getItem('statusWithdrawnMeta')))\r\n    setWithdrawnInformational(JSON.parse(localStorage.getItem('statusWithdrawnInformational')))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (props.data !== undefined) {\r\n      setInfo(props.data)\r\n      setWithdrawnCore(props.data.filter(filterWithdrawnCore))\r\n      localStorage.setItem('count', JSON.stringify(props.data))\r\n      localStorage.setItem('statusWithdrawnCore', JSON.stringify(props.data.filter(filterWithdrawnCore)))\r\n      localStorage.setItem('statusWithdrawnNetworking', JSON.stringify(props.data.filter(filterWithdrawnNetworking)))\r\n      localStorage.setItem('statusWithdrawnERC', JSON.stringify(props.data.filter(filterWithdrawnERC)))\r\n      localStorage.setItem('statusWithdrawnInterface', JSON.stringify(props.data.filter(filterWithdrawnInterface)))\r\n      localStorage.setItem('statusWithdrawnMeta', JSON.stringify(props.data.filter(filterWithdrawnMeta)))\r\n      localStorage.setItem('statusWithdrawnInformational', JSON.stringify(props.data.filter(filterWithdrawnInformational)))\r\n    } else {\r\n      localStorage.setItem('count', JSON.stringify(info))\r\n      localStorage.setItem('statusWithdrawnCore', JSON.stringify(info.filter(filterWithdrawnCore)))\r\n      localStorage.setItem('statusWithdrawnNetworking', JSON.stringify(info.filter(filterWithdrawnNetworking)))\r\n      localStorage.setItem('statusWithdrawnERC', JSON.stringify(info.filter(filterWithdrawnERC)))\r\n      localStorage.setItem('statusWithdrawnInterface', JSON.stringify(info.filter(filterWithdrawnInterface)))\r\n      localStorage.setItem('statusWithdrawnMeta', JSON.stringify(info.filter(filterWithdrawnMeta)))\r\n      localStorage.setItem('statusWithdrawnInformational', JSON.stringify(info.filter(filterWithdrawnInformational)))\r\n    }\r\n  }, [info])\r\n\r\n  console.log(info)\r\n  console.log(withdrawnCore)\r\n  console.log(withdrawnInformational)\r\n\r\n  function filterWithdrawnCore(item, index) {\r\n    if (index >= 246 && item[1] === 'Withdrawn' && item[5] === 'Core') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterWithdrawnNetworking(item, index) {\r\n    if (index >= 246 && item[1] === 'Withdrawn' && item[5] === 'Networking') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterWithdrawnInterface(item, index) {\r\n    if (index >= 246 && item[1] === 'Withdrawn' && item[5] === 'Interface') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterWithdrawnERC(item, index) {\r\n    if (index >= 246 && item[1] === 'Withdrawn' && item[5] === 'ERC') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterWithdrawnMeta(item, index) {\r\n    if (index >= 246 && item[1] === 'Withdrawn' && item[5] === 'Meta') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterWithdrawnInformational(item, index) {\r\n    if (index >= 246 && item[1] === 'Withdrawn' && item[5] === 'Informational') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {withdrawnCore.length === 0 ? null : <><div\r\n              style={{\r\n                  fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Core\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {withdrawnCore !== undefined ? (\r\n                          withdrawnCore.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {withdrawnNetworking.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Networking\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {withdrawnNetworking !== undefined ? (\r\n                          withdrawnNetworking.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n    {withdrawnERC.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              ERC\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {withdrawnERC !== undefined ? (\r\n                          withdrawnERC.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {withdrawnInterface.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Interface\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {withdrawnInterface !== undefined ? (\r\n                          withdrawnInterface.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {withdrawnMeta.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Meta\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {withdrawnMeta !== undefined ? (\r\n                          withdrawnMeta.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {withdrawnInformational.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Informational\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {withdrawnInformational !== undefined ? (\r\n                          withdrawnInformational.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default statusWithdrawn\r\n"],"names":["props","useState","info","setInfo","withdrawnCore","setWithdrawnCore","withdrawnNetworking","setWithdrawnNetworking","withdrawnERC","setWithdrawnERC","withdrawnInterface","setWithdrawnInterface","withdrawnMeta","setWithdrawnMeta","withdrawnInformational","setWithdrawnInformational","filterWithdrawnCore","item","index","filterWithdrawnNetworking","filterWithdrawnInterface","filterWithdrawnERC","filterWithdrawnMeta","filterWithdrawnInformational","useEffect","JSON","parse","localStorage","getItem","undefined","data","filter","setItem","stringify","console","log","length","style","fontSize","fontWeight","marginBottom","color","scope","map","parseInt"],"sourceRoot":""}