{"version":3,"file":"static/js/5481.25b1aa58.chunk.js","mappings":"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","sources":["views/tables/status/statusFinal.js"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\n/* eslint-disable react/jsx-key */\r\n/* eslint-disable prettier/prettier */\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\n/* eslint-disable prettier/prettier */\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n  CTable,\r\n  CTableHeaderCell,\r\n  CTableHead,\r\n  CTableRow,\r\n  CTableBody,\r\n  CTableDataCell,\r\n} from '@coreui/react'\r\n\r\nfunction statusFinal(props) {\r\n  const [info, setInfo] = useState()\r\n  const [finalCore, setFinalCore] = useState([])\r\n  const [finalNetworking, setFinalNetworking] = useState([])\r\n  const [finalERC, setFinalERC] = useState([])\r\n  const [finalInterface, setFinalInterface] = useState([])\r\n  const [finalMeta, setFinalMeta] = useState([])\r\n  const [finalInformational, setFinalInformational] = useState([])\r\n\r\n  useEffect(() => {\r\n    setInfo(JSON.parse(localStorage.getItem('count')))\r\n    setFinalCore(JSON.parse(localStorage.getItem('statusFinalCore')))\r\n    setFinalNetworking(JSON.parse(localStorage.getItem('statusFinalNetworking')))\r\n    setFinalERC(JSON.parse(localStorage.getItem('statusFinalERC')))\r\n    setFinalInterface(JSON.parse(localStorage.getItem('statusFinalInterface')))\r\n    setFinalMeta(JSON.parse(localStorage.getItem('statusFinalMeta')))\r\n    setFinalInformational(JSON.parse(localStorage.getItem('statusFinalInformational')))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (props.data !== undefined) {\r\n      setInfo(props.data)\r\n      setFinalCore(props.data.filter(filterFinalCore))\r\n      localStorage.setItem('count', JSON.stringify(props.data))\r\n      localStorage.setItem('statusFinalCore', JSON.stringify(props.data.filter(filterFinalCore)))\r\n      localStorage.setItem('statusFinalNetworking', JSON.stringify(props.data.filter(filterFinalNetworking)))\r\n      localStorage.setItem('statusFinalERC', JSON.stringify(props.data.filter(filterFinalERC)))\r\n      localStorage.setItem('statusFinalInterface', JSON.stringify(props.data.filter(filterFinalInterface)))\r\n      localStorage.setItem('statusFinalMeta', JSON.stringify(props.data.filter(filterFinalMeta)))\r\n      localStorage.setItem('statusFinalInformational', JSON.stringify(props.data.filter(filterFinalInformational)))\r\n    } else {\r\n      localStorage.setItem('count', JSON.stringify(info))\r\n      localStorage.setItem('statusFinalCore', JSON.stringify(info.filter(filterFinalCore)))\r\n      localStorage.setItem('statusFinalNetworking', JSON.stringify(info.filter(filterFinalNetworking)))\r\n      localStorage.setItem('statusFinalERC', JSON.stringify(info.filter(filterFinalERC)))\r\n      localStorage.setItem('statusFinalInterface', JSON.stringify(info.filter(filterFinalInterface)))\r\n      localStorage.setItem('statusFinalMeta', JSON.stringify(info.filter(filterFinalMeta)))\r\n      localStorage.setItem('statusFinalInformational', JSON.stringify(info.filter(filterFinalInformational)))\r\n    }\r\n  }, [info])\r\n\r\n  console.log(info)\r\n  console.log(finalCore)\r\n  console.log(finalInformational)\r\n\r\n  function filterFinalCore(item, index) {\r\n    if (index >= 246 && item[1] === 'Final' && item[5] === 'Core') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterFinalNetworking(item, index) {\r\n    if (index >= 246 && item[1] === 'Final' && item[5] === 'Networking') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterFinalInterface(item, index) {\r\n    if (index >= 246 && item[1] === 'Final' && item[5] === 'Interface') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterFinalERC(item, index) {\r\n    if (index >= 246 && item[1] === 'Final' && item[5] === 'ERC') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterFinalMeta(item, index) {\r\n    if (index >= 246 && item[1] === 'Final' && item[5] === 'Meta') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n  function filterFinalInformational(item, index) {\r\n    if (index >= 246 && item[1] === 'Final' && item[5] === 'Informational') {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {finalCore.length === 0 ? null : <><div\r\n              style={{\r\n                  fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Core\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {finalCore !== undefined ? (\r\n                          finalCore.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {finalNetworking.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Networking\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {finalNetworking !== undefined ? (\r\n                          finalNetworking.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n    {finalERC.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              ERC\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {finalERC !== undefined ? (\r\n                          finalERC.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {finalInterface.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Interface\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {finalInterface !== undefined ? (\r\n                          finalInterface.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {finalMeta.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Meta\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {finalMeta !== undefined ? (\r\n                          finalMeta.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n      {finalInformational.length === 0 ? null : <><div\r\n              style={{\r\n                fontSize: '40px',\r\n                  fontWeight: '800',\r\n                  marginBottom: '10px'\r\n              }}\r\n          >\r\n              Informational\r\n          </div><CTable>\r\n                  <CTableHead color=\"dark\">\r\n                      <CTableRow>\r\n                          <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\r\n                          <CTableHeaderCell scope=\"col\">Author</CTableHeaderCell>\r\n                      </CTableRow>\r\n                  </CTableHead>\r\n                  <CTableBody>\r\n                      {finalInformational !== undefined ? (\r\n                          finalInformational.map((item) => (\r\n                              <CTableRow>\r\n                                  <CTableHeaderCell scope=\"row\">\r\n                                      {item[2] !== null ? parseInt(item[2]) : 1}\r\n                                  </CTableHeaderCell>\r\n                                  <CTableDataCell>{item[3] != null ? item[3] : 1}</CTableDataCell>\r\n                                  <CTableDataCell>{item[4] !== null ? item[4] : 1}</CTableDataCell>\r\n                              </CTableRow>\r\n                          ))\r\n                      ) : (\r\n                          <CTableRow>\r\n                              <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n                              <CTableDataCell>Mark</CTableDataCell>\r\n                              <CTableDataCell>Otto</CTableDataCell>\r\n                          </CTableRow>\r\n                      )}\r\n                      {/* <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">1</CTableHeaderCell>\r\n      <CTableDataCell>Mark</CTableDataCell>\r\n      <CTableDataCell>Otto</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">2</CTableHeaderCell>\r\n      <CTableDataCell>Jacob</CTableDataCell>\r\n      <CTableDataCell>Thornton</CTableDataCell>\r\n    </CTableRow>\r\n    <CTableRow>\r\n      <CTableHeaderCell scope=\"row\">3</CTableHeaderCell>\r\n      <CTableDataCell colSpan=\"2\">Larry the Bird</CTableDataCell>\r\n    </CTableRow> */}\r\n                  </CTableBody>\r\n              </CTable></>}\r\n      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default statusFinal\r\n"],"names":["props","useState","info","setInfo","finalCore","setFinalCore","finalNetworking","setFinalNetworking","finalERC","setFinalERC","finalInterface","setFinalInterface","finalMeta","setFinalMeta","finalInformational","setFinalInformational","filterFinalCore","item","index","filterFinalNetworking","filterFinalInterface","filterFinalERC","filterFinalMeta","filterFinalInformational","useEffect","JSON","parse","localStorage","getItem","undefined","data","filter","setItem","stringify","console","log","length","style","fontSize","fontWeight","marginBottom","color","scope","map","parseInt"],"sourceRoot":""}