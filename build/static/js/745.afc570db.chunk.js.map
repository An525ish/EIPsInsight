{"version":3,"file":"static/js/745.afc570db.chunk.js","mappings":"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","sources":["views/charts/juneCharts.js"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\n/* eslint-disable no-undef */\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport github from '../../assets/grey_logo.png'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CCardHeader,\r\n  CRow,\r\n  CContainer,\r\n  CTable,\r\n  CTableHead,\r\n  CTableRow,\r\n  CTableHeaderCell,\r\n  CTableBody,\r\n  CTableDataCell,\r\n} from '@coreui/react'\r\nimport {\r\n  CChartBar,\r\n  CChartDoughnut,\r\n  CChartLine,\r\n  CChartPie,\r\n  CChartPolarArea,\r\n  CChartRadar,\r\n} from '@coreui/react-chartjs'\r\nimport 'chartjs-plugin-datalabels'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels'\r\nimport { DocsCallout } from 'src/components'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport './mayCharts.styles.css'\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from 'recharts'\r\nimport { element } from 'prop-types'\r\nimport { CanvasJS, CanvasJSChart } from 'canvasjs-react-charts'\r\n\r\nconst juneCharts = (props) => {\r\n  // const [info, setInfo] = useState()\r\n  const location = useLocation()\r\n\r\n  const [data, setData] = useState()\r\n\r\n  const allData = async () => {\r\n    try {\r\n      const res = await fetch('/register', {\r\n        method: 'GET',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application',\r\n        },\r\n        credentials: 'include',\r\n      })\r\n      const datas = await res.json()\r\n      console.log(datas)\r\n\r\n      const att = location.state.from.substring(1)\r\n      console.log(att)\r\n      const filterData = datas.filter((e) => {\r\n        return e.name.toLowerCase() === att.toLowerCase()\r\n      })\r\n      console.log(filterData)\r\n      setData(filterData)\r\n\r\n      if (!res.status === 200) {\r\n        const error = new Error(res.error)\r\n        throw error\r\n      }\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    allData()\r\n    // setInfo(localStorage.getItem('count'))\r\n  }, [])\r\n\r\n  console.log(data)\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          fontSize: '40px',\r\n          fontWeight: '800',\r\n          marginBottom: '20px',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          textTransform: 'uppercase',\r\n        }}\r\n      >\r\n        June Insights\r\n      </div>\r\n      <p className=\"h3\">Summary</p>\r\n      <hr />\r\n      <CContainer>\r\n        <CRow xs={{ cols: 2 }}>\r\n          <CCol>\r\n            <CTable align=\"middle\">\r\n              <CTableHead color=\"dark\">\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\r\n                  <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n                </CTableRow>\r\n              </CTableHead>\r\n              <CTableBody>\r\n                {parseInt(data === undefined ? 0 : data[0].summary.Draft) === 0 ? (\r\n                  ''\r\n                ) : (\r\n                  <CTableRow>\r\n                    <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                      Draft\r\n                    </CTableHeaderCell>\r\n                    <CTableDataCell style={{ fontSize: '34px' }}>\r\n                      {parseInt(data === undefined ? 0 : data[0].summary.Draft)}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                )}\r\n\r\n                {parseInt(data === undefined ? 0 : data[0].summary.Final) === 0 ? (\r\n                  ''\r\n                ) : (\r\n                  <CTableRow>\r\n                    <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                      Final\r\n                    </CTableHeaderCell>\r\n                    <CTableDataCell style={{ fontSize: '34px' }}>\r\n                      {parseInt(data === undefined ? 0 : data[0].summary.Final)}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                )}\r\n\r\n                {parseInt(data === undefined ? 0 : data[0].summary.Review) === 0 ? (\r\n                  ''\r\n                ) : (\r\n                  <CTableRow>\r\n                    <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                      Review\r\n                    </CTableHeaderCell>\r\n                    <CTableDataCell style={{ fontSize: '34px' }}>\r\n                      {parseInt(data === undefined ? 0 : data[0].summary.Review)}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                )}\r\n                {parseInt(data === undefined ? 0 : data[0].summary.LastCall) === 0 ? (\r\n                  ''\r\n                ) : (\r\n                  <CTableRow style={{ fontSize: '34px' }}>\r\n                    <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                      Last Call\r\n                    </CTableHeaderCell>\r\n                    <CTableDataCell>\r\n                      {parseInt(data === undefined ? 0 : data[0].summary.LastCall)}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                )}\r\n                {parseInt(data === undefined ? 0 : data[0].summary.Stagnant) === 0 ? (\r\n                  ''\r\n                ) : (\r\n                  <CTableRow>\r\n                    <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                      Stagnant\r\n                    </CTableHeaderCell>\r\n                    <CTableDataCell style={{ fontSize: '34px' }}>\r\n                      {parseInt(data === undefined ? 0 : data[0].summary.Stagnant)}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                )}\r\n                {parseInt(data === undefined ? 0 : data[0].summary.Withdrawn) === 0 ? (\r\n                  ''\r\n                ) : (\r\n                  <CTableRow>\r\n                    <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                      Withdrawn\r\n                    </CTableHeaderCell>\r\n                    <CTableDataCell style={{ fontSize: '34px' }}>\r\n                      {parseInt(data === undefined ? 0 : data[0].summary.Withdrawn)}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                )}\r\n                {parseInt(data === undefined ? 0 : data[0].summary.Living) === 0 ? (\r\n                  ''\r\n                ) : (\r\n                  <CTableRow>\r\n                    <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                      Living\r\n                    </CTableHeaderCell>\r\n                    <CTableDataCell style={{ fontSize: '34px' }}>\r\n                      {parseInt(data === undefined ? 0 : data[0].summary.Living)}\r\n                    </CTableDataCell>\r\n                  </CTableRow>\r\n                )}\r\n              </CTableBody>\r\n            </CTable>\r\n          </CCol>\r\n          <CCol>\r\n            {data === undefined ? null : data[0].summary.SummaryInfo === '' ? null : (\r\n              <div className=\"p-3 mb-2 bg-white text-black\" style={{ borderRadius: '20px' }}>\r\n                <p className=\"font-monospace\">\r\n                  {data[0].summary.SummaryInfo}\r\n                  {/* <label className=\"h4\">{'-> '} </label> Proposal for{' '}\r\n                <a className=\"text-decoration-none\" href=\"#\">\r\n                  Gray Glacier\r\n                </a>{' '}\r\n                upgrade,{' '}\r\n                <a className=\"text-decoration-none\" href=\"#\">\r\n                  EIP-5133: Delaying Difficulty Bomb to mid-September 2022\r\n                </a>{' '}\r\n                has completed it’s Last Call today and is successfully deployed on Ethereum mainnet.{' '}\r\n                <a className=\"text-decoration-none\" href=\"#\">\r\n                  PR\r\n                </a>{' '}\r\n                open to promote to <kbd>Final</kbd> */}\r\n                </p>{' '}\r\n              </div>\r\n            )}\r\n            {/* <div className=\"p-3 mb-2 bg-white text-black\" style={{ borderRadius: '20px' }}>\r\n              <p className=\"font-monospace\">\r\n                {' '}\r\n                <a className=\"text-decoration-none\" href=\"#\">\r\n                  EIP-5069: EIP Editor Handbook\r\n                </a>{' '}\r\n                is an Informational EIP added to the repository that will be a handy reference for\r\n                EIP editors and those who want to become one.\r\n              </p>{' '}\r\n            </div> */}\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n      <CContainer>\r\n        <CRow xs={{ cols: 2 }}>\r\n          <CCol\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            {data === undefined ? null : data[0].summary.HighlightText === '' ? null : (\r\n              <p>\r\n                <h1 className=\"display-6\" style={{ fontSize: '1.3rem', fontStyle: 'italic' }}>\r\n                  {data[0].summary.HighlightText}\r\n                </h1>\r\n              </p>\r\n            )}\r\n            {/* <p>\r\n              {' '}\r\n              <h1 className=\"display-6\" style={{ fontSize: '1.7rem' }}>\r\n                <a className=\"text-decoration-none\" href=\"#\">\r\n                  editor Gavin John (@Pandapip1) &#128079;\r\n                </a>{' '}\r\n              </h1>\r\n            </p> */}\r\n          </CCol>\r\n          {/* <CCol\r\n            style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <h1 className=\"display-6\" style={{ fontSize: '1.3rem' }}>\r\n              EIPs GitHub Greeting bot has been{' '}\r\n              <a\r\n                className=\"text-decoration-none\"\r\n                href=\"#\"\r\n                style={{ fontStyle: 'italic', fontSize: '1.7rem' }}\r\n              >\r\n                Removed\r\n              </a>{' '}\r\n            </h1>\r\n          </CCol> */}\r\n        </CRow>\r\n      </CContainer>\r\n\r\n      <hr />\r\n      <CRow>\r\n        {/* <CCol xs={12}>\r\n        <DocsCallout\r\n          name=\"Chart\"\r\n          href=\"components/chart\"\r\n          content=\"React wrapper component for Chart.js 3.0, the most popular charting library.\"\r\n        />\r\n      </CCol> */}\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayDraftTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Draft{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].Draft.Core) +\r\n                          parseInt(data[0].Draft.ERC) +\r\n                          parseInt(data[0].Draft.Networking) +\r\n                          parseInt(data[0].Draft.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Draft.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Draft.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Draft.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Draft.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartBar\r\n                // plugins={[ChartDataLabels]}\r\n                colours=\"[ { fillColor: '#ffff00' }, { fillColor: '#0066ff' } ]\"\r\n                data={{\r\n                  // backgroundImage: 'url(../../assets/images/github.png)',\r\n                  // backgroundImage: 'url(../../assets/images/github.png)',\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Draft',\r\n                      tension: 0,\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Draft.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Draft.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Draft.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Draft.Interface),\r\n                      ],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false,\r\n                    },\r\n                    tooltip: {\r\n                      callbacks: {\r\n                        title: (context) => {\r\n                          return ''\r\n                        },\r\n                        label: (context) => {\r\n                          console.log(context)\r\n                          return `${context.label}: ${context.parsed.y}`\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                      grid: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n\r\n                    XAxis: {\r\n                      ticks: {\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n                labels=\"months\"\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayFinalTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Final{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].Final.Core) +\r\n                          parseInt(data[0].Final.ERC) +\r\n                          parseInt(data[0].Final.Networking) +\r\n                          parseInt(data[0].Final.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Final.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Final.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Final.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Final.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartPie\r\n                // plugins={[ChartDataLabels]}\r\n                colours=\"[ { fillColor: '#ffff00' }, { fillColor: '#0066ff' } ]\"\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Final.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Final.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Final.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Final.Interface),\r\n                      ],\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  aspectRatio: 2,\r\n                  plugins: {\r\n                    legend: {\r\n                      position: 'right',\r\n                      align: 'center',\r\n                      marginBottom: 50,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayReviewTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Review{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].Review.Core) +\r\n                          parseInt(data[0].Review.ERC) +\r\n                          parseInt(data[0].Review.Networking) +\r\n                          parseInt(data[0].Review.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Review.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Review.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Review.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Review.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartBar\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      pointBorderColor: '#000000',\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Review.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Review.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Review.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Review.Interface),\r\n                      ],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                      grid: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n\r\n                    XAxis: {\r\n                      ticks: {\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n                labels=\"months\"\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayLastCallTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Last Call{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].LastCall.Core) +\r\n                          parseInt(data[0].LastCall.ERC) +\r\n                          parseInt(data[0].LastCall.Networking) +\r\n                          parseInt(data[0].LastCall.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].LastCall.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].LastCall.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].LastCall.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].LastCall.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartPolarArea\r\n                style={{\r\n                  visibility: `${\r\n                    parseInt(data === undefined ? 0 : data[0].LastCall.Core) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].LastCall.ERC) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].LastCall.Networking) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].LastCall.Interface) === 0\r\n                      ? 'hidden'\r\n                      : 'visible'\r\n                  }`,\r\n                }}\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].LastCall.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].LastCall.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].LastCall.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].LastCall.Interface),\r\n                      ],\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  aspectRatio: 2,\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                      },\r\n                    },\r\n                    r: {\r\n                      ticks: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n                  },\r\n                  plugins: {\r\n                    legend: {\r\n                      position: 'right',\r\n                      align: 'center',\r\n                      marginBottom: 50,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayStagnantTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Stagnant{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].Stagnant.Core) +\r\n                          parseInt(data[0].Stagnant.ERC) +\r\n                          parseInt(data[0].Stagnant.Networking) +\r\n                          parseInt(data[0].Stagnant.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Stagnant.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Stagnant.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Stagnant.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Stagnant.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartPie\r\n                style={{\r\n                  visibility: `${\r\n                    parseInt(data === undefined ? 0 : data[0].Stagnant.Core) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Stagnant.ERC) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Stagnant.Networking) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Stagnant.Interface) === 0\r\n                      ? 'hidden'\r\n                      : 'visible'\r\n                  }`,\r\n                }}\r\n                // plugins={[ChartDataLabels]}\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Stagnant.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Stagnant.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Stagnant.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Stagnant.Interface),\r\n                      ],\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  aspectRatio: 2,\r\n                  plugins: {\r\n                    legend: {\r\n                      position: 'right',\r\n                      align: 'center',\r\n                      marginBottom: 50,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayWithdrawnTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Withdrawn{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].Withdrawn.Core) +\r\n                          parseInt(data[0].Withdrawn.ERC) +\r\n                          parseInt(data[0].Withdrawn.Networking) +\r\n                          parseInt(data[0].Withdrawn.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Withdrawn.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Withdrawn.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Withdrawn.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Withdrawn.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartBar\r\n                style={{\r\n                  visibility: `${\r\n                    parseInt(data === undefined ? 0 : data[0].Withdrawn.Core) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Withdrawn.ERC) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Withdrawn.Networking) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Withdrawn.Interface) === 0\r\n                      ? 'hidden'\r\n                      : 'visible'\r\n                  }`,\r\n                }}\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Withdrawn',\r\n                      pointBorderColor: '#000000',\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Withdrawn.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Withdrawn.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Withdrawn.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Withdrawn.Interface),\r\n                      ],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                      grid: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n\r\n                    XAxis: {\r\n                      ticks: {\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n                labels=\"months\"\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <CCardHeader className=\"cardHeader\">Draft EIPs vs Potential Proposal</CCardHeader>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              <CChartBar\r\n                // plugins={[ChartDataLabels]}\r\n                data={{\r\n                  labels: ['Draft', 'Potential Proposal'],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Draft',\r\n                      tension: 0,\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [parseInt(data === undefined ? 0 : data[0].summary.Draft), 0],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  maintainAspectRatio: true,\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                      grid: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n\r\n                    XAxis: {\r\n                      ticks: {\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n                labels=\"months\"\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <CCardHeader className=\"cardHeader\">Final vs Draft</CCardHeader>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].summary.Draft) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].summary.Final) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartDoughnut\r\n                data={{\r\n                  labels: ['Final', 'Draft'],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Draft EIPs',\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].summary.Draft),\r\n                        parseInt(data === undefined ? 0 : data[0].summary.Final),\r\n                      ],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  aspectRatio: 2,\r\n                  maintainAspectRatio: true,\r\n                  plugins: {\r\n                    tooltip: {\r\n                      callbacks: {\r\n                        label: (context) => {\r\n                          return `${context.label}: ${context.parsed}`\r\n                        },\r\n                      },\r\n                    },\r\n                    legend: {\r\n                      position: 'right',\r\n                      align: 'center',\r\n                      marginBottom: 50,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n\r\n                  tooltips: {\r\n                    enabled: true,\r\n                  },\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <CCardHeader className=\"cardHeader\">\r\n              Living{' '}\r\n              <label style={{ fontWeight: '700' }}>\r\n                {'('}\r\n                {parseInt(\r\n                  data === undefined\r\n                    ? 0\r\n                    : parseInt(data[0].Living.Core) +\r\n                        parseInt(data[0].Living.ERC) +\r\n                        parseInt(data[0].Living.Networking) +\r\n                        parseInt(data[0].Living.Interface),\r\n                )}\r\n                {')'}\r\n              </label>\r\n            </CCardHeader>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Living.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Living.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Living.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Living.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartPie\r\n                // plugins={[ChartDataLabels]}\r\n                style={{\r\n                  visibility: `${\r\n                    parseInt(data === undefined ? 0 : data[0].Living.Core) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Living.ERC) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Living.Networking) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Living.Interface) === 0\r\n                      ? 'hidden'\r\n                      : 'visible'\r\n                  }`,\r\n                }}\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Living.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Living.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Living.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Living.Interface),\r\n                      ],\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  aspectRatio: 2,\r\n                  plugins: {\r\n                    legend: {\r\n                      position: 'right',\r\n                      align: 'center',\r\n                      marginBottom: 50,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayDraftTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">General Stats </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              <CChartBar\r\n                // plugins={[ChartDataLabels]}\r\n                colours=\"[ { fillColor: '#ffff00' }, { fillColor: '#0066ff' } ]\"\r\n                data={{\r\n                  // backgroundImage: 'url(../../assets/images/github.png)',\r\n                  // backgroundImage: 'url(../../assets/images/github.png)',\r\n                  labels: ['Open PR', 'Merged PR', 'Closed Issues', 'New Issues'],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Draft',\r\n                      tension: 0,\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].GeneralStats.OpenPR),\r\n                        parseInt(data === undefined ? 0 : data[0].GeneralStats.MergedPR),\r\n                        parseInt(data === undefined ? 0 : data[0].GeneralStats.ClosedIssues),\r\n                        parseInt(data === undefined ? 0 : data[0].GeneralStats.NewIssues),\r\n                      ],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false,\r\n                    },\r\n                    tooltip: {\r\n                      callbacks: {\r\n                        title: (context) => {\r\n                          return ''\r\n                        },\r\n                        label: (context) => {\r\n                          console.log(context)\r\n                          return `${context.label}: ${context.parsed.y}`\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                      grid: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n\r\n                    XAxis: {\r\n                      ticks: {\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n                labels=\"months\"\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CTable align=\"middle\">\r\n          <CTableHead color=\"dark\">\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"col\">Other Stats</CTableHeaderCell>\r\n              <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n            </CTableRow>\r\n          </CTableHead>\r\n          <CTableBody>\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"row\">Forks</CTableHeaderCell>\r\n              <CTableDataCell>\r\n                {parseInt(data === undefined ? 0 : data[0].OtherStats.Forks)}\r\n              </CTableDataCell>\r\n            </CTableRow>\r\n\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"row\">Users</CTableHeaderCell>\r\n              <CTableDataCell>\r\n                {parseInt(data === undefined ? 0 : data[0].OtherStats.Users)}\r\n              </CTableDataCell>\r\n            </CTableRow>\r\n\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"row\">Authors</CTableHeaderCell>\r\n              <CTableDataCell>\r\n                {parseInt(data === undefined ? 0 : data[0].OtherStats.Authors)}\r\n              </CTableDataCell>\r\n            </CTableRow>\r\n\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"row\">Files</CTableHeaderCell>\r\n              <CTableDataCell>\r\n                {parseInt(data === undefined ? 0 : data[0].OtherStats.Files)}\r\n              </CTableDataCell>\r\n            </CTableRow>\r\n          </CTableBody>\r\n        </CTable>\r\n      </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default juneCharts\r\n"],"names":["props","location","useLocation","useState","data","setData","allData","fetch","method","headers","Accept","credentials","res","json","datas","console","log","att","state","from","substring","filterData","filter","e","name","toLowerCase","status","Error","error","useEffect","style","fontSize","fontWeight","marginBottom","display","alignItems","justifyContent","textTransform","className","xs","cols","align","color","scope","parseInt","undefined","summary","Draft","Final","Review","LastCall","Stagnant","Withdrawn","Living","SummaryInfo","borderRadius","flexDirection","HighlightText","fontStyle","to","textDecoration","Core","ERC","Networking","Interface","backgroundColor","backgroundImage","github","backgroundSize","backgroundRepeat","backgroundPosition","textAlign","width","height","position","left","top","zIndex","colours","labels","datasets","label","tension","borderColor","borderWidth","options","plugins","legend","tooltip","callbacks","title","context","parsed","y","scales","yAxis","ticks","stepSize","font","family","grid","XAxis","aspectRatio","usePointStyle","pointBorderColor","visibility","r","maintainAspectRatio","tooltips","enabled","GeneralStats","OpenPR","MergedPR","ClosedIssues","NewIssues","OtherStats","Forks","Users","Authors","Files"],"sourceRoot":""}