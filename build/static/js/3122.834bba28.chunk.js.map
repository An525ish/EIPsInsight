{"version":3,"file":"static/js/3122.834bba28.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","views/pages/contactUs.js"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.6.2');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","/* eslint-disable prettier/prettier */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable prettier/prettier */\r\n/* eslint-disable react/no-unescaped-entities */\r\n\r\nimport React, { useRef, useState } from 'react'\r\nimport emailjs from '@emailjs/browser'\r\nimport './contactUs.styles.css'\r\nimport {\r\n  CButton,\r\n  CForm,\r\n  CFormCheck,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CFormText,\r\n  CFormTextarea,\r\n  CModal,\r\n  CModalBody,\r\n  CModalHeader,\r\n  CModalTitle,\r\n} from '@coreui/react'\r\nimport { useUserAuth } from 'src/Context/AuthContext'\r\n\r\nconst Contact = () => {\r\n  const { user } = useUserAuth()\r\n  const form = useRef()\r\n  const [visibleSm, setVisibleSm] = useState(false)\r\n\r\n  const sendEmail = (e) => {\r\n    e.preventDefault()\r\n\r\n    emailjs.sendForm('service_kqi3ebj', 'template_1hpufpx', form.current, 'Nj6W0EIDlUtD8ip0-').then(\r\n      (result) => {\r\n        console.log(result.text)\r\n        console.log('message sent')\r\n      },\r\n      (error) => {\r\n        console.log(error.text)\r\n      },\r\n    )\r\n    e.target.reset()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container1\">Contact Us</div>\r\n      <div className=\"whle\">\r\n        {/* <form ref={form} onSubmit={sendEmail}>\r\n        <label>Name</label>\r\n        <input type=\"text\" name=\"user_name\" />\r\n        <label>Email</label>\r\n        <input type=\"email\" name=\"user_email\" />\r\n        <label>Message</label>\r\n        <textarea name=\"message\" />\r\n        <input type=\"submit\" value=\"Send\" />\r\n      </form> */}\r\n        <CForm ref={form} onSubmit={sendEmail} className=\"form23\">\r\n          <div className=\"mb-3\">\r\n            <CFormLabel htmlFor=\"exampleInputEmail1\">Name</CFormLabel>\r\n            <CFormInput\r\n              type=\"text\"\r\n              name=\"user_name\"\r\n              id=\"exampleInputEmail1\"\r\n              aria-describedby=\"emailHelp\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <CFormLabel htmlFor=\"exampleInputPassword1\">Email</CFormLabel>\r\n            <CFormInput type=\"email\" id=\"exampleInputPassword1\" name=\"user_email\" required />\r\n            <CFormText id=\"emailHelp\">We'll never share your email with anyone else.</CFormText>\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <CFormLabel htmlFor=\"exampleInputPassword1\">Message</CFormLabel>\r\n            <CFormTextarea\r\n              type=\"text\"\r\n              id=\"exampleInputPassword1\"\r\n              name=\"message\"\r\n              className=\"textInput\"\r\n              required\r\n            />\r\n          </div>\r\n          <CButton type=\"submit\" onClick={() => setVisibleSm(!visibleSm)} className=\"buttonSubmit\">\r\n            Submit\r\n          </CButton>\r\n        </CForm>\r\n      </div>\r\n      <CModal size=\"sm\" visible={visibleSm} onClose={() => setVisibleSm(false)}>\r\n        <CModalHeader className=\"model12\">\r\n          <CModalTitle className=\"model1\">Recieved your Message!!!</CModalTitle>\r\n        </CModalHeader>\r\n      </CModal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Contact\r\n"],"names":["store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","httpResponse","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","useUserAuth","user","useRef","useState","visibleSm","setVisibleSm","className","ref","onSubmit","e","preventDefault","emailjs","current","then","result","console","log","error","reset","htmlFor","type","name","id","required","onClick","size","visible","onClose"],"sourceRoot":""}