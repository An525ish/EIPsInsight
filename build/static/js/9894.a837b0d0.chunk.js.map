{"version":3,"file":"static/js/9894.a837b0d0.chunk.js","mappings":"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","sources":["views/charts/AutoCharts.js"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\n/* eslint-disable no-undef */\r\n/* eslint-disable react-hooks/rules-of-hooks */\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport github from '../../assets/grey_logo.png'\r\nimport { ip } from './../../constants'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CCardHeader,\r\n  CRow,\r\n  CContainer,\r\n  CTable,\r\n  CTableHead,\r\n  CTableRow,\r\n  CTableHeaderCell,\r\n  CTableBody,\r\n  CTableDataCell,\r\n} from '@coreui/react'\r\nimport {\r\n  CChartBar,\r\n  CChartDoughnut,\r\n  CChartLine,\r\n  CChartPie,\r\n  CChartPolarArea,\r\n  CChartRadar,\r\n} from '@coreui/react-chartjs'\r\nimport 'chartjs-plugin-datalabels'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels'\r\nimport { DocsCallout } from 'src/components'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport './mayCharts.styles.css'\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from 'recharts'\r\nimport { element } from 'prop-types'\r\nimport { CanvasJS, CanvasJSChart } from 'canvasjs-react-charts'\r\n\r\nconst autoCharts = (props) => {\r\n  // const [info, setInfo] = useState()\r\n  let location = useLocation()\r\n\r\n  let [data, setData] = useState() // i set the data here\r\n\r\n  const allData = async (d) => {\r\n    try {\r\n      const res = await fetch(`${ip}/register`, {\r\n        // method: 'GET',\r\n        // headers: {\r\n        //   Accept: 'application/json',\r\n        //   'Content-Type': 'application',\r\n        // },\r\n        // credentials: 'include',\r\n      })\r\n      let datas = await res.json()\r\n      console.log(datas) // fine\r\n\r\n      let att = d.substring(1)\r\n      console.log(att) // this taking the name of the month we are fetching\r\n      let filterData = datas.filter((e) => {\r\n        return e.name.toLowerCase() === att.toLowerCase()\r\n      }) // we filter from here\r\n      console.log(filterData)\r\n      setData(filterData)\r\n\r\n      if (!res.status === 200) {\r\n        const error = new Error(res.error)\r\n        throw error\r\n      }\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    allData(location.state.from)\r\n    // setInfo(localStorage.getItem('count'))\r\n  }, [location.state.from])\r\n\r\n  console.log(data)\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          fontSize: '40px',\r\n          fontWeight: '800',\r\n          marginBottom: '20px',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          textTransform: 'uppercase',\r\n        }}\r\n      >\r\n        {data === undefined ? '' : data[0].name + ' ' + data[0].year} Insights\r\n      </div>\r\n      <p className=\"h3\">Summary</p>\r\n      <hr />\r\n      <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n        <div className=\"p-2\" style={{ width: '50%' }}>\r\n          <CTable align=\"middle\">\r\n            <CTableHead color=\"dark\">\r\n              <CTableRow>\r\n                <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\r\n                <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n              </CTableRow>\r\n            </CTableHead>\r\n            <CTableBody>\r\n              {parseInt(data === undefined ? 0 : data[0].summary.Draft) === 0 ? (\r\n                ''\r\n              ) : (\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                    Draft\r\n                  </CTableHeaderCell>\r\n                  <CTableDataCell style={{ fontSize: '34px' }}>\r\n                    {parseInt(data === undefined ? 0 : data[0].summary.Draft)}\r\n                  </CTableDataCell>\r\n                </CTableRow>\r\n              )}\r\n\r\n              {parseInt(data === undefined ? 0 : data[0].summary.Final) === 0 ? (\r\n                ''\r\n              ) : (\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                    Final\r\n                  </CTableHeaderCell>\r\n                  <CTableDataCell style={{ fontSize: '34px' }}>\r\n                    {parseInt(data === undefined ? 0 : data[0].summary.Final)}\r\n                  </CTableDataCell>\r\n                </CTableRow>\r\n              )}\r\n\r\n              {parseInt(data === undefined ? 0 : data[0].summary.Review) === 0 ? (\r\n                ''\r\n              ) : (\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                    Review\r\n                  </CTableHeaderCell>\r\n                  <CTableDataCell style={{ fontSize: '34px' }}>\r\n                    {parseInt(data === undefined ? 0 : data[0].summary.Review)}\r\n                  </CTableDataCell>\r\n                </CTableRow>\r\n              )}\r\n              {parseInt(data === undefined ? 0 : data[0].summary.LastCall) === 0 ? (\r\n                ''\r\n              ) : (\r\n                <CTableRow style={{ fontSize: '34px' }}>\r\n                  <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                    Last Call\r\n                  </CTableHeaderCell>\r\n                  <CTableDataCell>\r\n                    {parseInt(data === undefined ? 0 : data[0].summary.LastCall)}\r\n                  </CTableDataCell>\r\n                </CTableRow>\r\n              )}\r\n              {parseInt(data === undefined ? 0 : data[0].summary.Stagnant) === 0 ? (\r\n                ''\r\n              ) : (\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                    Stagnant\r\n                  </CTableHeaderCell>\r\n                  <CTableDataCell style={{ fontSize: '34px' }}>\r\n                    {parseInt(data === undefined ? 0 : data[0].summary.Stagnant)}\r\n                  </CTableDataCell>\r\n                </CTableRow>\r\n              )}\r\n              {parseInt(data === undefined ? 0 : data[0].summary.Withdrawn) === 0 ? (\r\n                ''\r\n              ) : (\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                    Withdrawn\r\n                  </CTableHeaderCell>\r\n                  <CTableDataCell style={{ fontSize: '34px' }}>\r\n                    {parseInt(data === undefined ? 0 : data[0].summary.Withdrawn)}\r\n                  </CTableDataCell>\r\n                </CTableRow>\r\n              )}\r\n              {parseInt(data === undefined ? 0 : data[0].summary.Living) === 0 ? (\r\n                ''\r\n              ) : (\r\n                <CTableRow>\r\n                  <CTableHeaderCell scope=\"row\" style={{ fontSize: '34px' }}>\r\n                    Living\r\n                  </CTableHeaderCell>\r\n                  <CTableDataCell style={{ fontSize: '34px' }}>\r\n                    {parseInt(data === undefined ? 0 : data[0].summary.Living)}\r\n                  </CTableDataCell>\r\n                </CTableRow>\r\n              )}\r\n            </CTableBody>\r\n          </CTable>\r\n        </div>\r\n        <div className=\"p-2\" style={{ width: '50%' }}>\r\n          {data === undefined ? null : data[0].summary.SummaryInfo === '' ? null : (\r\n            <div className=\"p-3 mb-2 bg-white text-black\" style={{ borderRadius: '20px' }}>\r\n              <p className=\"font-monospace\">{data[0].summary.SummaryInfo}</p>{' '}\r\n            </div>\r\n          )}\r\n          <ul>\r\n            {data === undefined ? null : data[0].summary.HighlightText === '' ? null : (\r\n              <li>\r\n                <p>\r\n                  <h1 className=\"display-6\" style={{ fontSize: '1.3rem', fontStyle: 'italic' }}>\r\n                    {data[0].summary.HighlightText}\r\n                  </h1>\r\n                </p>\r\n              </li>\r\n            )}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <hr />\r\n      <CRow>\r\n        {/* <CCol xs={12}>\r\n        <DocsCallout\r\n          name=\"Chart\"\r\n          href=\"components/chart\"\r\n          content=\"React wrapper component for Chart.js 3.0, the most popular charting library.\"\r\n        />\r\n      </CCol> */}\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayDraftTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Draft{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].Draft.Core) +\r\n                          parseInt(data[0].Draft.ERC) +\r\n                          parseInt(data[0].Draft.Networking) +\r\n                          parseInt(data[0].Draft.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                // backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Draft.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Draft.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Draft.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Draft.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartBar\r\n                // plugins={[ChartDataLabels]}\r\n                colours=\"[ { fillColor: '#ffff00' }, { fillColor: '#0066ff' } ]\"\r\n                data={{\r\n                  // backgroundImage: 'url(../../assets/images/github.png)',\r\n                  // backgroundImage: 'url(../../assets/images/github.png)',\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Draft',\r\n                      tension: 0,\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Draft.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Draft.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Draft.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Draft.Interface),\r\n                      ],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false,\r\n                    },\r\n                    tooltip: {\r\n                      callbacks: {\r\n                        title: (context) => {\r\n                          return ''\r\n                        },\r\n                        label: (context) => {\r\n                          console.log(context)\r\n                          return `${context.label}: ${context.parsed.y}`\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                      grid: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n\r\n                    XAxis: {\r\n                      ticks: {\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n                labels=\"months\"\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayFinalTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Final{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].Final.Core) +\r\n                          parseInt(data[0].Final.ERC) +\r\n                          parseInt(data[0].Final.Networking) +\r\n                          parseInt(data[0].Final.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                // backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Final.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Final.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Final.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Final.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartPie\r\n                // plugins={[ChartDataLabels]}\r\n                colours=\"[ { fillColor: '#ffff00' }, { fillColor: '#0066ff' } ]\"\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Final.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Final.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Final.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Final.Interface),\r\n                      ],\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  aspectRatio: 2,\r\n                  plugins: {\r\n                    legend: {\r\n                      position: 'right',\r\n                      align: 'center',\r\n                      marginBottom: 50,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayReviewTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Review{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].Review.Core) +\r\n                          parseInt(data[0].Review.ERC) +\r\n                          parseInt(data[0].Review.Networking) +\r\n                          parseInt(data[0].Review.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                // backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Review.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Review.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Review.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Review.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartBar\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      pointBorderColor: '#000000',\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Review.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Review.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Review.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Review.Interface),\r\n                      ],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                      grid: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n\r\n                    XAxis: {\r\n                      ticks: {\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n                labels=\"months\"\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayLastCallTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Last Call{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].LastCall.Core) +\r\n                          parseInt(data[0].LastCall.ERC) +\r\n                          parseInt(data[0].LastCall.Networking) +\r\n                          parseInt(data[0].LastCall.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                // backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].LastCall.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].LastCall.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].LastCall.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].LastCall.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartPolarArea\r\n                style={{\r\n                  visibility: `${\r\n                    parseInt(data === undefined ? 0 : data[0].LastCall.Core) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].LastCall.ERC) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].LastCall.Networking) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].LastCall.Interface) === 0\r\n                      ? 'hidden'\r\n                      : 'visible'\r\n                  }`,\r\n                }}\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].LastCall.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].LastCall.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].LastCall.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].LastCall.Interface),\r\n                      ],\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  aspectRatio: 2,\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                      },\r\n                    },\r\n                    r: {\r\n                      ticks: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n                  },\r\n                  plugins: {\r\n                    legend: {\r\n                      position: 'right',\r\n                      align: 'center',\r\n                      marginBottom: 50,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayStagnantTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Stagnant{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].Stagnant.Core) +\r\n                          parseInt(data[0].Stagnant.ERC) +\r\n                          parseInt(data[0].Stagnant.Networking) +\r\n                          parseInt(data[0].Stagnant.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                // backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Stagnant.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Stagnant.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Stagnant.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Stagnant.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartPie\r\n                style={{\r\n                  visibility: `${\r\n                    parseInt(data === undefined ? 0 : data[0].Stagnant.Core) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Stagnant.ERC) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Stagnant.Networking) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Stagnant.Interface) === 0\r\n                      ? 'hidden'\r\n                      : 'visible'\r\n                  }`,\r\n                }}\r\n                // plugins={[ChartDataLabels]}\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Stagnant.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Stagnant.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Stagnant.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Stagnant.Interface),\r\n                      ],\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  aspectRatio: 2,\r\n                  plugins: {\r\n                    legend: {\r\n                      position: 'right',\r\n                      align: 'center',\r\n                      marginBottom: 50,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayWithdrawnTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">\r\n                Withdrawn{' '}\r\n                <label style={{ fontWeight: '700' }}>\r\n                  {'('}\r\n                  {parseInt(\r\n                    data === undefined\r\n                      ? 0\r\n                      : parseInt(data[0].Withdrawn.Core) +\r\n                          parseInt(data[0].Withdrawn.ERC) +\r\n                          parseInt(data[0].Withdrawn.Networking) +\r\n                          parseInt(data[0].Withdrawn.Interface),\r\n                  )}\r\n                  {')'}\r\n                </label>\r\n              </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                // backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Withdrawn.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Withdrawn.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Withdrawn.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Withdrawn.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartBar\r\n                style={{\r\n                  visibility: `${\r\n                    parseInt(data === undefined ? 0 : data[0].Withdrawn.Core) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Withdrawn.ERC) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Withdrawn.Networking) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Withdrawn.Interface) === 0\r\n                      ? 'hidden'\r\n                      : 'visible'\r\n                  }`,\r\n                }}\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Withdrawn',\r\n                      pointBorderColor: '#000000',\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Withdrawn.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Withdrawn.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Withdrawn.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Withdrawn.Interface),\r\n                      ],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                      grid: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n\r\n                    XAxis: {\r\n                      ticks: {\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n                labels=\"months\"\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <CCardHeader className=\"cardHeader\">Draft EIPs vs Potential Proposal</CCardHeader>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                // backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              <CChartBar\r\n                // plugins={[ChartDataLabels]}\r\n                data={{\r\n                  labels: ['Draft', 'Potential Proposal'],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Draft',\r\n                      tension: 0,\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [parseInt(data === undefined ? 0 : data[0].summary.Draft), 0],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  maintainAspectRatio: true,\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false,\r\n                    },\r\n                  },\r\n\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                      grid: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n\r\n                    XAxis: {\r\n                      ticks: {\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n                labels=\"months\"\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <CCardHeader className=\"cardHeader\">Final vs Draft</CCardHeader>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                // backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].summary.Draft) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].summary.Final) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartDoughnut\r\n                data={{\r\n                  labels: ['Final', 'Draft'],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Draft EIPs',\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].summary.Draft),\r\n                        parseInt(data === undefined ? 0 : data[0].summary.Final),\r\n                      ],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  aspectRatio: 2,\r\n                  maintainAspectRatio: true,\r\n                  plugins: {\r\n                    tooltip: {\r\n                      callbacks: {\r\n                        label: (context) => {\r\n                          return `${context.label}: ${context.parsed}`\r\n                        },\r\n                      },\r\n                    },\r\n                    legend: {\r\n                      position: 'right',\r\n                      align: 'center',\r\n                      marginBottom: 50,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n\r\n                  tooltips: {\r\n                    enabled: true,\r\n                  },\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <CCardHeader className=\"cardHeader\">\r\n              Living{' '}\r\n              <label style={{ fontWeight: '700' }}>\r\n                {'('}\r\n                {parseInt(\r\n                  data === undefined\r\n                    ? 0\r\n                    : parseInt(data[0].Living.Core) +\r\n                        parseInt(data[0].Living.ERC) +\r\n                        parseInt(data[0].Living.Networking) +\r\n                        parseInt(data[0].Living.Interface),\r\n                )}\r\n                {')'}\r\n              </label>\r\n            </CCardHeader>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                // backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              {parseInt(data === undefined ? 0 : data[0].Living.Core) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Living.ERC) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Living.Networking) === 0 &&\r\n              parseInt(data === undefined ? 0 : data[0].Living.Interface) === 0 ? (\r\n                <div\r\n                  style={{\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    left: '0',\r\n                    top: '83px',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    color: 'rgba(220, 52, 85, 0.5)',\r\n                    zIndex: '1',\r\n                    fontSize: '26px',\r\n                  }}\r\n                >\r\n                  <b>No data for you today!</b>\r\n                </div>\r\n              ) : (\r\n                ''\r\n              )}\r\n              <CChartPie\r\n                // plugins={[ChartDataLabels]}\r\n                style={{\r\n                  visibility: `${\r\n                    parseInt(data === undefined ? 0 : data[0].Living.Core) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Living.ERC) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Living.Networking) === 0 &&\r\n                    parseInt(data === undefined ? 0 : data[0].Living.Interface) === 0\r\n                      ? 'hidden'\r\n                      : 'visible'\r\n                  }`,\r\n                }}\r\n                data={{\r\n                  labels: ['Core', 'ERC', 'Networking', 'Interface'],\r\n                  datasets: [\r\n                    {\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].Living.Core),\r\n                        parseInt(data === undefined ? 0 : data[0].Living.ERC),\r\n                        parseInt(data === undefined ? 0 : data[0].Living.Networking),\r\n                        parseInt(data === undefined ? 0 : data[0].Living.Interface),\r\n                      ],\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  aspectRatio: 2,\r\n                  plugins: {\r\n                    legend: {\r\n                      position: 'right',\r\n                      align: 'center',\r\n                      marginBottom: 50,\r\n                      labels: {\r\n                        usePointStyle: true,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs={6}>\r\n          <CCard className=\"mb-4 cardBorder\">\r\n            <Link to=\"/mayDraftTable\" style={{ textDecoration: 'none', color: 'inherit' }}>\r\n              <CCardHeader className=\"cardHeader\">General Stats </CCardHeader>\r\n            </Link>\r\n            <CCardBody\r\n              className=\"childChartContainer\"\r\n              style={{\r\n                // backgroundColor: '#fff9db',\r\n                backgroundImage: `url(${github})`,\r\n                backgroundSize: '33% 50%',\r\n                backgroundRepeat: 'no-repeat',\r\n                backgroundPosition: 'right -16px top -32px',\r\n              }}\r\n            >\r\n              <CChartBar\r\n                // plugins={[ChartDataLabels]}\r\n                colours=\"[ { fillColor: '#ffff00' }, { fillColor: '#0066ff' } ]\"\r\n                data={{\r\n                  // backgroundImage: 'url(../../assets/images/github.png)',\r\n                  // backgroundImage: 'url(../../assets/images/github.png)',\r\n                  labels: ['Open PR', 'Merged PR', 'Closed Issues', 'New Issues'],\r\n                  datasets: [\r\n                    {\r\n                      label: 'Draft',\r\n                      tension: 0,\r\n                      backgroundColor: [\r\n                        'rgba(59, 201, 219, 0.3)',\r\n                        'rgba(250, 82, 82, 0.3)',\r\n                        'rgba(252, 196, 25, 0.3)',\r\n                        'rgba(55, 178, 77, 0.3)',\r\n                      ],\r\n                      borderColor: [\r\n                        'rgba(59, 201, 219, 1)',\r\n                        'rgba(250, 82, 82, 1)',\r\n                        'rgba(252, 196, 25, 1)',\r\n                        'rgba(55, 178, 77, 1)',\r\n                      ],\r\n                      borderWidth: 2,\r\n                      data: [\r\n                        parseInt(data === undefined ? 0 : data[0].GeneralStats.OpenPR),\r\n                        parseInt(data === undefined ? 0 : data[0].GeneralStats.MergedPR),\r\n                        parseInt(data === undefined ? 0 : data[0].GeneralStats.ClosedIssues),\r\n                        parseInt(data === undefined ? 0 : data[0].GeneralStats.NewIssues),\r\n                      ],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false,\r\n                    },\r\n                    tooltip: {\r\n                      callbacks: {\r\n                        title: (context) => {\r\n                          return ''\r\n                        },\r\n                        label: (context) => {\r\n                          console.log(context)\r\n                          return `${context.label}: ${context.parsed.y}`\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n\r\n                  scales: {\r\n                    yAxis: {\r\n                      ticks: {\r\n                        stepSize: 1,\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                      grid: {\r\n                        display: false,\r\n                      },\r\n                    },\r\n\r\n                    XAxis: {\r\n                      ticks: {\r\n                        font: {\r\n                          family: 'Roboto',\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                }}\r\n                labels=\"months\"\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CTable align=\"middle\">\r\n          <CTableHead color=\"dark\">\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"col\">Other Stats</CTableHeaderCell>\r\n              <CTableHeaderCell scope=\"col\">Number</CTableHeaderCell>\r\n            </CTableRow>\r\n          </CTableHead>\r\n          <CTableBody>\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"row\">Forks</CTableHeaderCell>\r\n              <CTableDataCell>\r\n                {parseInt(data === undefined ? 0 : data[0].OtherStats.Forks)}\r\n              </CTableDataCell>\r\n            </CTableRow>\r\n\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"row\">Users</CTableHeaderCell>\r\n              <CTableDataCell>\r\n                {parseInt(data === undefined ? 0 : data[0].OtherStats.Users)}\r\n              </CTableDataCell>\r\n            </CTableRow>\r\n\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"row\">Authors</CTableHeaderCell>\r\n              <CTableDataCell>\r\n                {parseInt(data === undefined ? 0 : data[0].OtherStats.Authors)}\r\n              </CTableDataCell>\r\n            </CTableRow>\r\n\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"row\">Files</CTableHeaderCell>\r\n              <CTableDataCell>\r\n                {parseInt(data === undefined ? 0 : data[0].OtherStats.Files)}\r\n              </CTableDataCell>\r\n            </CTableRow>\r\n          </CTableBody>\r\n        </CTable>\r\n      </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default autoCharts\r\n"],"names":["props","location","useLocation","useState","data","setData","allData","d","fetch","ip","res","json","datas","console","log","att","substring","filterData","filter","e","name","toLowerCase","status","Error","error","useEffect","state","from","style","fontSize","fontWeight","marginBottom","display","alignItems","justifyContent","textTransform","undefined","year","className","flexDirection","width","align","color","scope","parseInt","summary","Draft","Final","Review","LastCall","Stagnant","Withdrawn","Living","SummaryInfo","borderRadius","HighlightText","fontStyle","xs","to","textDecoration","Core","ERC","Networking","Interface","backgroundImage","github","backgroundSize","backgroundRepeat","backgroundPosition","textAlign","height","position","left","top","zIndex","colours","labels","datasets","label","tension","backgroundColor","borderColor","borderWidth","options","plugins","legend","tooltip","callbacks","title","context","parsed","y","scales","yAxis","ticks","stepSize","font","family","grid","XAxis","aspectRatio","usePointStyle","pointBorderColor","visibility","r","maintainAspectRatio","tooltips","enabled","GeneralStats","OpenPR","MergedPR","ClosedIssues","NewIssues","OtherStats","Forks","Users","Authors","Files"],"sourceRoot":""}